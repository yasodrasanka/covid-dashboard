{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountyPicker.module.css","images/covid.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","error","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","coronaImage","alt","id","class","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8ea033d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\n\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    if (!confirmed) {\n        return \"Loading ...\";\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography varaint=\"h5\" gutterBottom>\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={1.5}\n                                separator=\",\"\n\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography varaint=\"body2\" gutterBottom>Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography varaint=\"h5\" gutterBottom>\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={1.5}\n                                separator=\",\"\n\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography varaint=\"body2\" gutterBottom>Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography varaint=\"h5\" gutterBottom>\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={1.5}\n                                separator=\",\"\n\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography varaint=\"body2\" gutterBottom>Number of death caused by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n            </Grid>\n        </div>);\n\n}\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async (country) => {\n    const changeableUrl = country ? `${url}/countries/${country}` : url;\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            recovered: dailyData.recovered.total,\n            date: dailyData.reportDate\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.error(error);\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Charts.module.css';\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchApi = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchApi();\n    }, []);\n\n\n    const lineChart = (\n        dailyData.length ?\n            (<Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true\n                        },\n                        {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255,0,0,0.5)',\n                            fill: true\n                        }\n                    ]\n                }}\n            />)\n            : null\n    );\n\n    const barChart = (\n        country ?\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [\n                        {\n                            label: 'People',\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }\n                    ]\n                }}\n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `Current State in ${country}` }\n                }}\n            />\n            : null\n    );\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    );\n}\nexport default Charts;","import React, { useState, useEffect } from 'react';\nimport { FormControl, NativeSelect } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\nimport styles from './CountyPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchApi = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n\n        fetchApi();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl} >\n            <NativeSelect defaultValue=\"\" onChange={(e) => { handleCountryChange(e.target.value) }}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl >\n    );\n\n}\nexport default CountryPicker;","import React, { Component } from 'react';\n\nimport { Charts, Cards, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/covid.png';\nclass App extends Component {\n\n    state = {\n        data: {},\n        country: ''\n    };\n\n    async componentDidMount() {\n        const data = await fetchData();\n        this.setState({ data });\n    }\n\n    handleCountryChange = async (country) => {\n        const data = await fetchData(country);\n        this.setState({ data, country });\n    }\n\n    render() {\n        const { data, country } = this.state;\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"covid-19\" />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={data} country={country} />\n                <footer id=\"footer\">\n                    <div class=\"row text-center\">\n                        <div class=\"small-12 medium-6 medium-offset-3 columns\">\n                            <p id=\"copyright\">Copyright &copy; 2020 | Yasod Rasanka</p>\n                        </div>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountyPicker_formControl__2fBVM\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}